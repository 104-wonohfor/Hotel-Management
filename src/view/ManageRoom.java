/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import dao.RoomDAO;
import dto.Room;
import types.RoomStatus;
import types.RoomStyle;

import java.util.List;

import javax.swing.JOptionPane;

/**
 *
 * @author Thang
 */
public class ManageRoom extends javax.swing.JFrame {

    private String userID;

    private boolean ascending = true;

    public ManageRoom() {
        setTitle("Manage Room");
        getContentPane().setBackground(java.awt.Color.DARK_GRAY);
        initComponents();
        loadTable("Room Number", ascending);
    }

    public ManageRoom(String userID) {
        this.userID = userID;
        System.out.println("Manage Room: " + userID);

        setTitle("Manage Room");
        getContentPane().setBackground(java.awt.Color.DARK_GRAY);
        initComponents();
        loadTable("Room Number", ascending);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator2 = new javax.swing.JSeparator();
        backButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        UsernameTxt7 = new javax.swing.JLabel();
        UsernameTxt6 = new javax.swing.JLabel();
        priceField = new javax.swing.JTextField();
        numBedsField = new javax.swing.JTextField();
        confirmButton = new javax.swing.JButton();
        UsernameTxt5 = new javax.swing.JLabel();
        UsernameTxt4 = new javax.swing.JLabel();
        actionBox = new javax.swing.JComboBox<>();
        roomNumberField = new javax.swing.JTextField();
        UsernameTxt2 = new javax.swing.JLabel();
        UsernameTxt = new javax.swing.JLabel();
        UsernameTxt1 = new javax.swing.JLabel();
        styleField = new javax.swing.JTextField();
        roomStatusField = new javax.swing.JTextField();
        standardCheck = new javax.swing.JCheckBox();
        deluxeCheck = new javax.swing.JCheckBox();
        businessCheck = new javax.swing.JCheckBox();
        oneBedCheck = new javax.swing.JCheckBox();
        twoBedsCheck = new javax.swing.JCheckBox();
        threeBedsCheck = new javax.swing.JCheckBox();
        listGuestField = new javax.swing.JTextField();
        searchButton = new javax.swing.JToggleButton();
        occupiedCheck = new javax.swing.JCheckBox();
        availableCheck = new javax.swing.JCheckBox();
        notAvailableCheck = new javax.swing.JCheckBox();
        columnOrderBox = new javax.swing.JComboBox<>();
        UsernameTxt3 = new javax.swing.JLabel();
        AsDsButton = new javax.swing.JToggleButton();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBounds(new java.awt.Rectangle(300, 200, 0, 0));

        backButton.setText("Back");
        backButton.setFocusable(false);
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTable1MousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        UsernameTxt7.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        UsernameTxt7.setForeground(new java.awt.Color(215, 210, 203));
        UsernameTxt7.setText("Room Status");

        UsernameTxt6.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        UsernameTxt6.setForeground(new java.awt.Color(215, 210, 203));
        UsernameTxt6.setText("Guest In Room");

        priceField.setDisabledTextColor(java.awt.Color.black);
        priceField.setEnabled(false);

        numBedsField.setDisabledTextColor(java.awt.Color.black);
        numBedsField.setEnabled(false);

        confirmButton.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        confirmButton.setText("Confirm");
        confirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmButtonActionPerformed(evt);
            }
        });

        UsernameTxt5.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        UsernameTxt5.setForeground(new java.awt.Color(215, 210, 203));
        UsernameTxt5.setText("Bed(s)");

        UsernameTxt4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        UsernameTxt4.setForeground(new java.awt.Color(215, 210, 203));
        UsernameTxt4.setText("Price");

        actionBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "View", "Edit Room", "Delete Room", "Add Room" }));
        actionBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionBoxActionPerformed(evt);
            }
        });

        roomNumberField.setDisabledTextColor(java.awt.Color.black);
        roomNumberField.setEnabled(false);

        UsernameTxt2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        UsernameTxt2.setForeground(new java.awt.Color(215, 210, 203));
        UsernameTxt2.setText("Action");

        UsernameTxt.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        UsernameTxt.setForeground(new java.awt.Color(215, 210, 203));
        UsernameTxt.setText("Room Number");

        UsernameTxt1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        UsernameTxt1.setForeground(new java.awt.Color(215, 210, 203));
        UsernameTxt1.setText("Style");

        styleField.setDisabledTextColor(java.awt.Color.black);
        styleField.setEnabled(false);

        roomStatusField.setDisabledTextColor(java.awt.Color.black);
        roomStatusField.setEnabled(false);

        standardCheck.setBackground(java.awt.Color.darkGray);
        standardCheck.setForeground(new java.awt.Color(255, 255, 0));
        standardCheck.setSelected(true);
        standardCheck.setText("STANDARD");

        deluxeCheck.setBackground(java.awt.Color.darkGray);
        deluxeCheck.setForeground(new java.awt.Color(255, 255, 0));
        deluxeCheck.setSelected(true);
        deluxeCheck.setText("DELUXE");

        businessCheck.setBackground(java.awt.Color.darkGray);
        businessCheck.setForeground(new java.awt.Color(255, 255, 0));
        businessCheck.setSelected(true);
        businessCheck.setText("BUSINESS_SUITE");

        oneBedCheck.setBackground(java.awt.Color.darkGray);
        oneBedCheck.setForeground(new java.awt.Color(51, 255, 0));
        oneBedCheck.setSelected(true);
        oneBedCheck.setText("One Bed");

        twoBedsCheck.setBackground(java.awt.Color.darkGray);
        twoBedsCheck.setForeground(new java.awt.Color(51, 255, 0));
        twoBedsCheck.setSelected(true);
        twoBedsCheck.setText("Two Beds");

        threeBedsCheck.setBackground(java.awt.Color.darkGray);
        threeBedsCheck.setForeground(new java.awt.Color(51, 255, 0));
        threeBedsCheck.setSelected(true);
        threeBedsCheck.setText("Three Beds");

        listGuestField.setDisabledTextColor(java.awt.Color.black);
        listGuestField.setEnabled(false);

        searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/search-icon.png"))); // NOI18N
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        occupiedCheck.setBackground(java.awt.Color.darkGray);
        occupiedCheck.setForeground(new java.awt.Color(255, 0, 0));
        occupiedCheck.setSelected(true);
        occupiedCheck.setText("OCCUPIED");

        availableCheck.setBackground(java.awt.Color.darkGray);
        availableCheck.setForeground(new java.awt.Color(255, 0, 0));
        availableCheck.setSelected(true);
        availableCheck.setText("AVAILABLE");

        notAvailableCheck.setBackground(java.awt.Color.darkGray);
        notAvailableCheck.setForeground(new java.awt.Color(255, 0, 0));
        notAvailableCheck.setSelected(true);
        notAvailableCheck.setText("NOT_AVAILABLE");

        columnOrderBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Room Number", "Price" }));
        columnOrderBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                columnOrderBoxActionPerformed(evt);
            }
        });

        UsernameTxt3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        UsernameTxt3.setForeground(new java.awt.Color(215, 210, 203));
        UsernameTxt3.setText("Order By");

        AsDsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/AscendingDescending.png"))); // NOI18N
        AsDsButton.setPreferredSize(new java.awt.Dimension(30, 30));
        AsDsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AsDsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 910, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(25, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(UsernameTxt)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(roomNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(UsernameTxt5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(numBedsField, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(UsernameTxt7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(roomStatusField, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(82, 82, 82)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(UsernameTxt4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(UsernameTxt1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(priceField, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)
                                    .addComponent(styleField)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(UsernameTxt6, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(confirmButton)
                                    .addComponent(listGuestField, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(UsernameTxt2)
                        .addGap(18, 18, 18)
                        .addComponent(actionBox, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(searchButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(standardCheck)
                    .addComponent(availableCheck))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(deluxeCheck)
                        .addGap(29, 29, 29)
                        .addComponent(businessCheck))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(occupiedCheck)
                        .addGap(18, 18, 18)
                        .addComponent(notAvailableCheck)))
                .addGap(72, 72, 72)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(oneBedCheck)
                        .addGap(18, 18, 18)
                        .addComponent(twoBedsCheck)
                        .addGap(18, 18, 18)
                        .addComponent(threeBedsCheck))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(UsernameTxt3, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(columnOrderBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(AsDsButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(roomNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UsernameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UsernameTxt1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(styleField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numBedsField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UsernameTxt5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UsernameTxt4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(priceField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(roomStatusField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UsernameTxt7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UsernameTxt6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(listGuestField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(actionBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(confirmButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(UsernameTxt2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(standardCheck)
                            .addComponent(deluxeCheck)
                            .addComponent(businessCheck)
                            .addComponent(oneBedCheck)
                            .addComponent(twoBedsCheck)
                            .addComponent(threeBedsCheck))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(AsDsButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(availableCheck)
                                .addComponent(occupiedCheck)
                                .addComponent(notAvailableCheck)
                                .addComponent(columnOrderBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(UsernameTxt3))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(searchButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void setFieldEnabled(boolean enabled) {
        roomNumberField.setEnabled(enabled);
        styleField.setEnabled(enabled);
        numBedsField.setEnabled(enabled);
        priceField.setEnabled(enabled);
    }

    private void clearField() {
        roomNumberField.setText("");
        styleField.setText("");
        numBedsField.setText("");
        priceField.setText("");
        roomStatusField.setText("");
        listGuestField.setText("");
    }

    private void loadTable(String column, boolean ascending) {
        boolean standard = standardCheck.isSelected();
        boolean deluxe = deluxeCheck.isSelected();
        boolean business = businessCheck.isSelected();
        boolean oneBed = oneBedCheck.isSelected();
        boolean twoBeds = twoBedsCheck.isSelected();
        boolean threeBeds = threeBedsCheck.isSelected();
        boolean available = availableCheck.isSelected();
        boolean occupied = occupiedCheck.isSelected();
        boolean notAvailable = notAvailableCheck.isSelected();

        if (!standard && !deluxe && !business) {
            JOptionPane.showMessageDialog(null, "Please select at least one room style");
            return;
        }

        if (!oneBed && !twoBeds && !threeBeds) {
            JOptionPane.showMessageDialog(null, "Please select at least one number of beds");
            return;
        }

        if (!available && !occupied && !notAvailable) {
            JOptionPane.showMessageDialog(null, "Please select at least one room status");
            return;
        }

        List<Room> rooms = new RoomDAO().getRoomByFilter(standard, deluxe, business, oneBed, twoBeds, threeBeds, available, occupied, notAvailable, column, ascending);

        String[][] data = new String[rooms.size()][5];
        for (int i = 0; i < rooms.size(); i++) {
            Room room = rooms.get(i);
            data[i][0] = room.getRoomNumber();
            data[i][1] = room.getStyle().toString();
            data[i][2] = String.valueOf(room.getNumBeds());
            data[i][3] = String.valueOf(room.getBookingPrice());
            data[i][4] = room.getRoomStatus().toString();
        }

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            data,
            new String [] {
                "Room Number", "Style", "Bed(s)", "Price", "Room Status"
            }
        ));
    }

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        // if userID starts with "G" then back to DashboardGuest, with "R" then back to DashboardReceptionist, with "M" then back to DashboardManager
        if (userID.startsWith("G")) {
            new DashboardGuest(userID).setVisible(true);
        } else if (userID.startsWith("R")) {
            try {
                new DashboardReceptionist(userID).setVisible(true);
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else if (userID.startsWith("M")) {
            try {
                new DashboardManager(userID).setVisible(true);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        this.setVisible(false);
    }//GEN-LAST:event_backButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
        String column = columnOrderBox.getSelectedItem().toString();
        loadTable(column, ascending);
    }//GEN-LAST:event_searchButtonActionPerformed

    private void AsDsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AsDsButtonActionPerformed
        // TODO add your handling code here:
        ascending = !ascending;
        String column = columnOrderBox.getSelectedItem().toString();
        loadTable(column, ascending);       
    }//GEN-LAST:event_AsDsButtonActionPerformed

    private void columnOrderBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_columnOrderBoxActionPerformed
        // TODO add your handling code here:
        String column = columnOrderBox.getSelectedItem().toString();
        loadTable(column, ascending);
    }//GEN-LAST:event_columnOrderBoxActionPerformed

    private void jTable1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MousePressed
        // TODO add your handling code here:
        int row = jTable1.getSelectedRow();
        int roomNumber = Integer.parseInt(jTable1.getModel().getValueAt(row, 0).toString());

        Room room = new RoomDAO().getRoomByRoomNumber(roomNumber);
        roomNumberField.setText(room.getRoomNumber());
        styleField.setText(room.getStyle().toString());
        numBedsField.setText(String.valueOf(room.getNumBeds()));
        priceField.setText(String.valueOf(room.getBookingPrice()));
        roomStatusField.setText(room.getRoomStatus().toString());
        listGuestField.setText(String.join(", ", room.getGuestName()));

        actionBox.setSelectedIndex(0);
    }//GEN-LAST:event_jTable1MousePressed

    private void actionBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionBoxActionPerformed
        // TODO add your handling code here:
        String action = actionBox.getSelectedItem().toString();

        if (action.equals("View")) {
            setFieldEnabled(false);
            roomStatusField.setEnabled(false);
        } else if (action.equals("Edit Room")) {
            String roomStatus = roomStatusField.getText();
            if (jTable1.getSelectedRow() == -1) {
                JOptionPane.showMessageDialog(null, "Please select a room to edit");
                return;
            } else if (roomStatus.equals("OCCUPIED")) {
                JOptionPane.showMessageDialog(null, "Cannot edit an OCCUPIED room");
                actionBox.setSelectedIndex(0);
                return;
            }
            setFieldEnabled(true);
            roomStatusField.setEnabled(true);
        } else if (action.equals("Delete Room")) {
            String roomStatus = roomStatusField.getText();
            if (jTable1.getSelectedRow() == -1) {
                JOptionPane.showMessageDialog(null, "Please select a room to delete");
                return;
            } else if (roomStatus.equals("OCCUPIED")) {
                JOptionPane.showMessageDialog(null, "Cannot delete an OCCUPIED room");
                actionBox.setSelectedIndex(0);
                return;
            }
            setFieldEnabled(false);
            roomStatusField.setEnabled(false);
        } else if (action.equals("Add Room")) {
            jTable1.clearSelection();
            setFieldEnabled(true);
            roomStatusField.setEnabled(true);
            clearField();
        }
    }//GEN-LAST:event_actionBoxActionPerformed

    private void confirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmButtonActionPerformed
        // TODO add your handling code here:
        String action = actionBox.getSelectedItem().toString();
        String roomNumber = roomNumberField.getText();
        String style = styleField.getText();
        String numBeds = numBedsField.getText();
        String price = priceField.getText();
        String roomStatus = roomStatusField.getText();
       
        if (!checkFieldAccepable(roomNumber, style, numBeds, price, roomStatus)) {
            return;
        }

        if (action.equals("View")) {
            JOptionPane.showMessageDialog(null, "Nothing happened! Hehe");
            return;
        }

        if (action.equals("Edit Room")) {
            Room room = new Room(String.valueOf(roomNumber), RoomStyle.fromString(style), RoomStatus.fromString(roomStatus), Double.parseDouble(price), Integer.parseInt(numBeds));
            new RoomDAO().updateRoom(room);
            JOptionPane.showMessageDialog(null, "Room updated successfully");
            clearField();
            searchButton.doClick();
        } else if (action.equals("Delete Room")) {
            new RoomDAO().deleteRoomByRoomNumber(Integer.parseInt(roomNumber));
            JOptionPane.showMessageDialog(null, "Room deleted successfully");
            clearField();
            searchButton.doClick();
        } else if (action.equals("Add Room")) {
            Room room = new Room(String.valueOf(roomNumber), RoomStyle.fromString(style), RoomStatus.fromString(roomStatus), Double.parseDouble(price), Integer.parseInt(numBeds));
            new RoomDAO().insertRoom(room);
            JOptionPane.showMessageDialog(null, "Room added successfully");
            clearField();
            searchButton.doClick();
        }



    }//GEN-LAST:event_confirmButtonActionPerformed

    private boolean checkFieldAccepable(String roomNumber, String style, String numBeds, String price, String roomStatus) {
        if (roomNumber.isEmpty() || style.isEmpty() || numBeds.isEmpty() || price.isEmpty() || roomStatus.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please fill in all fields");
            return false;
        }

        // if roomNumber is not integer
        if (!roomNumber.matches("\\d+")) {
            JOptionPane.showMessageDialog(null, "Room Number must be an integer");
            return false;
        }

        // if style is not "STANDARD", "DELUXE", "BUSINESS_SUITE"
        if (!style.equals("STANDARD") && !style.equals("DELUXE") && !style.equals("BUSINESS_SUITE")) {
            JOptionPane.showMessageDialog(null, "Style must be STANDARD, DELUXE, or BUSINESS_SUITE");
            return false;
        }

        // if numBeds is not integer
        if (!numBeds.matches("\\d+")) {
            JOptionPane.showMessageDialog(null, "Number of Beds must be an integer");
            return false;
        }

        // if price is not double
        if (!price.matches("\\d+(\\.\\d+)?")) {
            JOptionPane.showMessageDialog(null, "Price must be a number");
            return false;
        }

        // if roomStatus is not "AVAILABLE", "OCCUPIED", "NOT_AVAILABLE"
        if (!roomStatus.equals("AVAILABLE") && !roomStatus.equals("NOT_AVAILABLE")) {
            JOptionPane.showMessageDialog(null, "Room Status must be AVAILABLE or NOT_AVAILABLE");
            return false;
        } else if (roomStatus.equals("OCCUPIED")) {
            JOptionPane.showMessageDialog(null, "Cannot set room status to OCCUPIED");
            return false;
        }

        return true;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageRoom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageRoom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageRoom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageRoom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageRoom().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton AsDsButton;
    private javax.swing.JLabel UsernameTxt;
    private javax.swing.JLabel UsernameTxt1;
    private javax.swing.JLabel UsernameTxt2;
    private javax.swing.JLabel UsernameTxt3;
    private javax.swing.JLabel UsernameTxt4;
    private javax.swing.JLabel UsernameTxt5;
    private javax.swing.JLabel UsernameTxt6;
    private javax.swing.JLabel UsernameTxt7;
    private javax.swing.JComboBox<String> actionBox;
    private javax.swing.JCheckBox availableCheck;
    private javax.swing.JButton backButton;
    private javax.swing.JCheckBox businessCheck;
    private javax.swing.JComboBox<String> columnOrderBox;
    private javax.swing.JButton confirmButton;
    private javax.swing.JCheckBox deluxeCheck;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField listGuestField;
    private javax.swing.JCheckBox notAvailableCheck;
    private javax.swing.JTextField numBedsField;
    private javax.swing.JCheckBox occupiedCheck;
    private javax.swing.JCheckBox oneBedCheck;
    private javax.swing.JTextField priceField;
    private javax.swing.JTextField roomNumberField;
    private javax.swing.JTextField roomStatusField;
    private javax.swing.JToggleButton searchButton;
    private javax.swing.JCheckBox standardCheck;
    private javax.swing.JTextField styleField;
    private javax.swing.JCheckBox threeBedsCheck;
    private javax.swing.JCheckBox twoBedsCheck;
    // End of variables declaration//GEN-END:variables
}
